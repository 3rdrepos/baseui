package com.soundstep.baseui.demo {	import com.soma.core.Soma;	import com.soma.core.interfaces.ISoma;	import com.soma.debugger.SomaDebugger;	import com.soma.debugger.events.SomaDebuggerEvent;	import com.soma.debugger.vo.SomaDebuggerVO;	import com.soundstep.baseui.demo.commands.ObjectCommand;	import com.soundstep.baseui.demo.commands.StartCommand;	import com.soundstep.baseui.demo.events.EventConstants;	import com.soundstep.baseui.demo.events.ObjectEvent;	import flash.events.Event;	/**	 * <b>Author:</b> Romuald Quantin - <a href="http://www.soundstep.com/" target="_blank">www.soundstep.com</a><br />	 * <b>Company:</b> Less Rain - <a href="http://www.lessrain.com/" target="_blank">www.lessrain.com</a><br />	 * <b>Class version:</b> 1.0<br />	 * <b>Actionscript version:</b> 3.0<br />	 * <b>Copyright:</b> 	 * <br />	 * <b>Date:</b> Feb 16, 2010<br />	 * <b>Usage:</b>	 * @example	 * <listing version="3.0"></listing>	 */		public class SomaApplication extends Soma implements ISoma {		//------------------------------------		// private, protected properties		//------------------------------------				private var _app:Main; 		private var _debugMode:Boolean;		//------------------------------------		// public properties		//------------------------------------								//------------------------------------		// constructor		//------------------------------------				public function SomaApplication(app:Main, debugMode:Boolean = false) {			_app = app;			_debugMode = debugMode;			super(_app.stage);			initializeApplication();		}				//		// PRIVATE, PROTECTED		//________________________________________________________________________________________________				private function initializeApplication():void {			if (_debugMode) {				var vo:SomaDebuggerVO = new SomaDebuggerVO(this, SomaDebugger.NAME_DEFAULT, getCommands(), true, false);				createPlugin(SomaDebugger, vo) as SomaDebugger;			}			dispatchEvent(new Event(EventConstants.START));		}				override protected function registerCommands():void {			addCommand(EventConstants.START, StartCommand);			addCommand(ObjectEvent.SELECT, ObjectCommand);			addCommand(ObjectEvent.ADD, ObjectCommand);			addCommand(ObjectEvent.REMOVE, ObjectCommand);		}				// PUBLIC		//________________________________________________________________________________________________				public function get app():Main {			return _app;		}				public function debug(value:Object):void {			dispatchEvent(new SomaDebuggerEvent(SomaDebuggerEvent.PRINT, value));		}				public function get debugMode():Boolean {			return _debugMode;		}	}}