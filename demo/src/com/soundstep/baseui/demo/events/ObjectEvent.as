package com.soundstep.baseui.demo.events {	import flash.display.DisplayObject;	import flash.display.DisplayObjectContainer;	import flash.events.Event;	/**	 * <b>Author:</b> Romuald Quantin - <a href="http://www.soundstep.com/" target="_blank">www.soundstep.com</a><br />	 * <b>Class version:</b> 1.0<br />	 * <b>Actionscript version:</b> 3.0<br />	 * <b>Copyright:</b> 	 * <br />	 * <b>Date:</b> Feb 16, 2010<br />	 * <b>Usage:</b>	 * @example	 * <listing version="3.0"></listing>	 */		public class ObjectEvent extends Event {		//------------------------------------		// private, protected properties		//------------------------------------				//------------------------------------		// public properties		//------------------------------------				public static const SELECT:String = "BD::ObjectEvent.SELECT";		public static const SELECTED:String = "BD::ObjectEvent.SELECTED";				public static const ADD:String = "BD::ObjectEvent.ADD";		public static const REMOVE:String = "BD::ObjectEvent.REMOVE";				public var name:String;		public var object:DisplayObject;		public var container:DisplayObjectContainer;		//------------------------------------		// constructor		//------------------------------------				public function ObjectEvent(type:String, name:String = null, object:DisplayObject = null, container:DisplayObjectContainer = null, bubbles:Boolean = true, cancelable:Boolean = false) {			this.name = name;			this.object = object;			this.container = container;			super(type, bubbles, cancelable);		}				//		// PRIVATE, PROTECTED		//________________________________________________________________________________________________				//		// PUBLIC		//________________________________________________________________________________________________				override public function clone():Event {			return new ObjectEvent(type, name, object, container, bubbles, cancelable);		}				override public function toString():String {			return formatToString("ObjectEvent", "name", "object", "container", "type", "bubbles", "cancelable", "eventPhase");		}			}}