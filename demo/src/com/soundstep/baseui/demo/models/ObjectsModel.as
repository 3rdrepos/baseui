package com.soundstep.baseui.demo.models {	import com.soma.core.interfaces.IModel;	import com.soma.core.model.Model;	import com.soma.ui.layouts.CanvasUI;	import com.soma.ui.layouts.HBoxUI;	import com.soma.ui.layouts.LayoutUI;	import com.soma.ui.layouts.TileUI;	import com.soma.ui.layouts.VBoxUI;	import com.soundstep.baseui.demo.constants.LayoutConstant;	import com.soundstep.baseui.demo.constants.ObjectConstant;	import com.soundstep.baseui.demo.views.objects.SquareAnimatedObject;	import com.soundstep.baseui.demo.views.objects.SquareObject;	import com.soundstep.baseui.demo.views.objects.SquareObjectCentered;	import com.soundstep.baseui.demo.views.objects.SquareObjectInverted;	import flash.display.Bitmap;	import flash.display.DisplayObject;	import flash.display.DisplayObjectContainer;	import flash.display.PixelSnapping;	import flash.text.TextField;	import flash.text.TextFieldType;	import flash.text.TextFormat;	import flash.utils.Dictionary;	/**	 * <b>Author:</b> Romuald Quantin - <a href="http://www.soundstep.com/" target="_blank">www.soundstep.com</a><br />	 * <b>Company:</b> Less Rain - <a href="http://www.lessrain.com/" target="_blank">www.lessrain.com</a><br />	 * <b>Class version:</b> 1.0<br />	 * <b>Actionscript version:</b> 3.0<br />	 * <b>Copyright:</b> 	 * <br />	 * <b>Date:</b> Feb 16, 2010<br />	 * <b>Usage:</b>	 * @example	 * <listing version="3.0"></listing>	 */		public class ObjectsModel extends Model implements IModel {		//------------------------------------		// private, protected properties		//------------------------------------				private var _objects:Dictionary;		private var _properties:Dictionary;		private var _counts:Dictionary;				//------------------------------------		// public properties		//------------------------------------				public static const NAME:String = "BD::ObjectsModel";				//------------------------------------		// constructor		//------------------------------------				public function ObjectsModel() {			super(NAME);		}				//		// PRIVATE, PROTECTED		//________________________________________________________________________________________________				override protected function initialize():void {			_objects = new Dictionary();			_properties = new Dictionary();			_counts = new Dictionary();		}				private function setLayoutProperties(layout:LayoutUI):void {			layout.backgroundColor = Math.random() * 0xFF0000;			layout.backgroundAlpha = 0.3;
		}				// PUBLIC		//________________________________________________________________________________________________				public function createObject(type:String, reference:DisplayObjectContainer = null):DisplayObject {			if (_counts[type] == undefined) _counts[type] = 0;			var object:DisplayObject;			switch (type) {				case ObjectConstant.SQUARE:					object = new SquareObject();					object.name = "square " + (_counts[type]++);					_properties[object.name] = {top:0, left:0};					break;				case ObjectConstant.SQUARE_CENTERED:					object = new SquareObjectCentered();					object.name = "square centered " + (_counts[type]++);					_properties[object.name] = {top:0, left:0, rect:{x:-(object.width>>1), y:-(object.height>>1), width:object.width, height:object.height}};					break;				case ObjectConstant.SQUARE_INVERTED:					object = new SquareObjectInverted();					object.name = "square inverted " + (_counts[type]++);					_properties[object.name] = {top:0, left:0, rect:{x:-(object.width>>1), y:-(object.height>>1), width:object.width, height:object.height}};					break;				case ObjectConstant.SQUARE_ANIMATED:					object = new SquareAnimatedObject();					object.name = "square animated " + (_counts[type]++);					_properties[object.name] = {top:0, left:0, rect:{x:-(object.width>>1), y:-(object.height>>1), width:object.width, height:object.height}};					break;				case ObjectConstant.IMAGE:					object = new Bitmap(new Background(0,0), PixelSnapping.AUTO, true);					object.name = "image " + (_counts[ObjectConstant.IMAGE]++);					_properties[object.name] = {top:0, left:0};					break;				case ObjectConstant.TEXTFIELD:					var textfield:TextField = new TextField();					textfield.type = TextFieldType.INPUT;					textfield.embedFonts = true;					textfield.defaultTextFormat = new TextFormat("PF Ronda Seven", 8, 0xD16E00);					textfield.width = 300;					textfield.multiline = true;					textfield.wordWrap = true;					textfield.text = "Digital art is an umbrella term for a range of artistic works and practices that utilize digital technology. Since the 1970s various names have been used to describe what is now called digital art including computer art and multimedia art but digital art is itself placed under the larger umbrella term new media art. The impact of digital technology has transformed traditional activities such as painting, drawing and sculpture, while new forms, such as net art, digital installation art, and virtual reality, have become recognized artistic practices. More generally the term digital artist is used to describe an artist who makes use of digital technologies in the production of art.";					object = textfield;					object.name = "textfield " + (_counts[type]++);					_properties[object.name] = {top:0, left:0};					break;				case ObjectConstant.GRID:					object = new Bitmap(new Grid(0,0), PixelSnapping.AUTO, true);					object.name = "grid " + (_counts[type]++);					_properties[object.name] = {top:0, left:0};					break;				case LayoutConstant.CANVAS:					object = new CanvasUI(reference);					object.name = "canvas " + (_counts[type]++);					_properties[object.name] = {top:0, left:0};					setLayoutProperties(LayoutUI(object));					break;				case LayoutConstant.HBOX:					object = new HBoxUI(reference);					object.name = "horizontal box " + (_counts[type]++);					_properties[object.name] = {top:0, left:0};					setLayoutProperties(LayoutUI(object));					break;				case LayoutConstant.VBOX:					object = new VBoxUI(reference);					object.name = "vertical box " + (_counts[type]++);					_properties[object.name] = {top:0, left:0};					setLayoutProperties(LayoutUI(object));					break;				case LayoutConstant.TILE:					object = new TileUI(reference);					object.name = "tile " + (_counts[type]++);					_properties[object.name] = {top:0, left:0};					setLayoutProperties(LayoutUI(object));					break;			}			objects[object.name] = object;			return object;		}				public function destroyObject(object:DisplayObject):void {			delete objects[object.name];		}				public function get objects():Dictionary {			return _objects;		}				public function get properties():Dictionary {			return _properties;		}				public function getObject(name:String):DisplayObject {			 return _objects[name];		}				public function getProperties(name:String):Object {			 return _properties[name];		}			}}