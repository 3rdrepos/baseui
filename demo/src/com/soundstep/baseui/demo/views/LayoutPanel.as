package com.soundstep.baseui.demo.views {	import com.bit101.components.CheckBox;	import com.bit101.components.ColorChooser;	import com.bit101.components.ComboBox;	import com.bit101.components.HUISlider;	import com.bit101.components.InputText;	import com.bit101.components.Label;	import com.bit101.components.PushButton;	import com.soma.ui.layouts.CanvasUI;	import com.soma.ui.layouts.HBoxUI;	import com.soma.ui.layouts.LayoutUI;	import com.soma.ui.layouts.TileUI;	import com.soma.ui.layouts.VBoxUI;	import com.soundstep.baseui.demo.constants.LayoutConstant;	import com.soundstep.baseui.demo.events.ObjectEvent;	import com.soundstep.baseui.demo.views.core.Panel;	import flash.display.Sprite;	import flash.events.Event;	/**	 * <b>Author:</b> Romuald Quantin - <a href="http://www.soundstep.com/" target="_blank">www.soundstep.com</a><br />	 * <b>Company:</b> Less Rain - <a href="http://www.lessrain.com/" target="_blank">www.lessrain.com</a><br />	 * <b>Class version:</b> 1.0<br />	 * <b>Actionscript version:</b> 3.0<br />	 * <b>Copyright:</b> 	 * <br />	 * <b>Date:</b> Feb 16, 2010<br />	 * <b>Usage:</b>	 * @example	 * <listing version="3.0"></listing>	 */		public class LayoutPanel extends Panel {		//------------------------------------		// private, protected properties		//------------------------------------				private var _layoutContainer:Sprite;		private var _selectAddLayouts:ComboBox;		private var _addLayout:PushButton;		private var _selectLayouts:ComboBox;		private var _removeLayout:PushButton;				private var _layoutCanvasContainer:Sprite;		private var _layoutHBoxContainer:Sprite;		private var _layoutVBoxContainer:Sprite;		private var _layoutTileContainer:Sprite;				private var _inputs:Object;				private var _currentLayout:LayoutUI;				//------------------------------------		// public properties		//------------------------------------				public static const WIDTH:Number = 250;		public static const HEIGHT:Number = 346;				//------------------------------------		// constructor		//------------------------------------				public function LayoutPanel() {			super("LAYOUT PANEL", WIDTH, HEIGHT);		}				//		// PRIVATE, PROTECTED		//________________________________________________________________________________________________				override protected function initialize():void {			super.initialize();			visible = false;			_inputs = {};			createLayout();			createLayoutCanvas();			createLayoutHBox();			createLayoutVBox();			createLayoutTile();			setIndex();		}				private function createLayout():void {			// container			_layoutContainer = new Sprite();			_layoutContainer.x = 3;			_layoutContainer.y = 15;			addChild(_layoutContainer);			var posY:Number = 5;			// create object			var labelAddLayout:Label = new Label(_layoutContainer, 10, posY, "create layout");			posY = labelAddLayout.y + labelAddLayout.height;			_selectAddLayouts = new ComboBox();			_selectAddLayouts.defaultLabel = "ADD LAYOUT";			_selectAddLayouts.width = 150;			_selectAddLayouts.height = 18;			_selectAddLayouts.x = 10;			_selectAddLayouts.y = posY;			_selectAddLayouts.addItem({label:"canvas", data:LayoutConstant.CANVAS});			_selectAddLayouts.addItem({label:"horizontal box", data:LayoutConstant.HBOX});			_selectAddLayouts.addItem({label:"vertical box", data:LayoutConstant.VBOX});			_selectAddLayouts.addItem({label:"tile", data:LayoutConstant.TILE});			_selectAddLayouts.numVisibleItems = 4;			_layoutContainer.addChild(_selectAddLayouts);			posY = _selectAddLayouts.y + _selectAddLayouts.height;			_addLayout = new PushButton(_layoutContainer, (_selectAddLayouts.x + _selectAddLayouts.width + 5), _selectAddLayouts.y, "ADD", addLayoutHandler);			_addLayout.width = 60;			_addLayout.height = 18;			// select			var labelSelectObject:Label = new Label(_layoutContainer, 10, posY, "select container");			posY = labelSelectObject.y + labelSelectObject.height;			_selectLayouts = new ComboBox();			_selectLayouts.addEventListener(Event.SELECT, selectObjectsHandler);			_selectLayouts.defaultLabel = "SELECT LAYOUT";			_selectLayouts.width = 150;			_selectLayouts.height = 18;			_selectLayouts.x = 10;			_selectLayouts.y = posY;			_selectLayouts.addItem({label:"stage", data:"stage"});			_layoutContainer.addChild(_selectLayouts);			_removeLayout = new PushButton(_layoutContainer, (_selectLayouts.x + _selectLayouts.width + 5), _selectLayouts.y, "REMOVE", removeLayoutHandler);			_removeLayout.width = 60;			_removeLayout.height = 18;		}				private function addCommonProperties(container:Sprite):void {
			var posX:Number = 10;			var posY:Number = 0;			// color			var bcLabel:Label = new Label(container, posX, posY, "background color");			var color:ColorChooser = new ColorChooser(container, posX, bcLabel.y + bcLabel.height, 0, colorHandler);			color.x += 1;			color.usePopup = true;			color.useHandCursor = true;			// alpha			var baLabel:Label = new Label(container, color.x + color.width + 30, posY, "background alpha");
			posY = baLabel.y + baLabel.height + 2;			var alph:HUISlider = new HUISlider(container, color.x + color.width + 30, posY, "", alphaHandler);			alph.labelPrecision = 2;			alph.minimum = 0;			alph.maximum = 1;			alph.tick = 0.01;			alph.x -= 7;			alph.width = 150;			posY = alph.y + alph.height + 7;			// hide			var hide:CheckBox = new CheckBox(container, posX, posY, "hide outside content", hideHandler);			hide.x += 1;			posY = hide.y + hide.height + 5;			// enable			var enable:CheckBox = new CheckBox(container, posX, posY, "enable", enableHandler);			enable.x += 1;			posY = enable.y + enable.height + 5;			// enable			var childrenEnable:CheckBox = new CheckBox(container, posX, posY, "enable children", childrenEnableHandler);			childrenEnable.x += 1;			posY = childrenEnable.y + childrenEnable.height + 5;			// inputs			var sel:String;			if (container == _layoutCanvasContainer) sel = "canvas";			else if (container == _layoutHBoxContainer) sel = "hbox";			else if (container == _layoutVBoxContainer) sel = "vbox";			else if (container == _layoutTileContainer) sel = "tile";			_inputs[sel] = {				color: color,				alpha: alph,				hide: hide,				enable: enable,				childrenEnable: childrenEnable			};		}				private function createLayoutCanvas():void {			// container			_layoutCanvasContainer = new Sprite();			_layoutCanvasContainer.x = 3;			_layoutCanvasContainer.y = _layoutContainer.y + _layoutContainer.height + 10;			_layoutCanvasContainer.visible = false;			addChild(_layoutCanvasContainer);			// common			addCommonProperties(_layoutCanvasContainer);			// properties					}		private function createLayoutHBox():void {			// container			_layoutHBoxContainer = new Sprite();			_layoutHBoxContainer.x = 3;			_layoutHBoxContainer.y = _layoutContainer.y + _layoutContainer.height + 10;			_layoutHBoxContainer.visible = false;			addChild(_layoutHBoxContainer);			// common			addCommonProperties(_layoutHBoxContainer);			// properties			var posX:Number = 10;			var posY:Number = 87;			// gap			var gapLabel:Label = new Label(_layoutHBoxContainer, posX, posY, "gap (horizontal, vertical)");			posY = gapLabel.y + gapLabel.height;			var gapInputH:InputText = new InputText(_layoutHBoxContainer, posX , posY, "", gapHandler);			gapInputH.width = 36;			var gapInputV:InputText = new InputText(_layoutHBoxContainer, gapInputH.x + gapInputH.width + 2, posY, "", gapHandler);			gapInputV.width = 36;			gapInputH.name = "horizontal";			gapInputV.name = "vertical";			posY = gapInputV.y + gapInputV.height + 2;			// padding			var paddingLabel:Label = new Label(_layoutHBoxContainer, posX, posY, "padding (top, left, right, bottom)");			posY = paddingLabel.y + paddingLabel.height;			var paddingInputT:InputText = new InputText(_layoutHBoxContainer, posX, posY, "", paddingHandler);			paddingInputT.width = 36;			var paddingInputL:InputText = new InputText(_layoutHBoxContainer, paddingInputT.x + paddingInputT.width + 2, posY, "", paddingHandler);			paddingInputL.width = 36;			var paddingInputR:InputText = new InputText(_layoutHBoxContainer, paddingInputL.x + paddingInputL.width + 2, posY, "", paddingHandler);			paddingInputR.width = 36;			var paddingInputB:InputText = new InputText(_layoutHBoxContainer, paddingInputR.x + paddingInputR.width + 2, posY, "", paddingHandler);			paddingInputB.width = 36;			paddingInputT.name = "top";			paddingInputL.name = "left";			paddingInputR.name = "right";			paddingInputB.name = "bottom";			posY = paddingInputB.y + paddingInputB.height + 2;			// align			var alignLabel:Label = new Label(_layoutHBoxContainer, posX, posY, "alignment");			posY = alignLabel.y + alignLabel.height;			var alignSelect:ComboBox = new ComboBox();			alignSelect.addEventListener(Event.SELECT, alignHandler);			alignSelect.defaultLabel = "ALIGNMENT";			alignSelect.width = 150;			alignSelect.height = 18;			alignSelect.x = posX;			alignSelect.y = posY;			alignSelect.addItem({label:"TOP LEFT", data:HBoxUI.ALIGN_TOP_LEFT});			alignSelect.addItem({label:"CENTER LEFT", data:HBoxUI.ALIGN_CENTER_LEFT});			alignSelect.addItem({label:"BOTTOM LEFT", data:HBoxUI.ALIGN_BOTTOM_LEFT});			alignSelect.addItem({label:"TOP RIGHT", data:HBoxUI.ALIGN_TOP_RIGHT});			alignSelect.addItem({label:"CENTER RIGHT", data:HBoxUI.ALIGN_CENTER_RIGHT});			alignSelect.addItem({label:"BOTTOM RIGHT", data:HBoxUI.ALIGN_BOTTOM_RIGHT});			alignSelect.numVisibleItems = 6;			alignSelect.openPosition = ComboBox.TOP;			_layoutHBoxContainer.addChild(alignSelect);			// properties			_inputs['hbox'].gapH = gapInputH;			_inputs['hbox'].gapV = gapInputV;			_inputs['hbox'].paddingT = paddingInputT;			_inputs['hbox'].paddingL = paddingInputL;			_inputs['hbox'].paddingR = paddingInputR;			_inputs['hbox'].paddingB = paddingInputB;			_inputs['hbox'].align = alignSelect;		}		private function createLayoutVBox():void {			// container			_layoutVBoxContainer = new Sprite();			_layoutVBoxContainer.x = 3;			_layoutVBoxContainer.y = _layoutContainer.y + _layoutContainer.height + 10;			_layoutVBoxContainer.visible = false;			addChild(_layoutVBoxContainer);			// common			addCommonProperties(_layoutVBoxContainer);			// properties			var posX:Number = 10;			var posY:Number = 87;			// gap			var gapLabel:Label = new Label(_layoutVBoxContainer, posX, posY, "gap (horizontal, vertical)");			posY = gapLabel.y + gapLabel.height;			var gapInputH:InputText = new InputText(_layoutVBoxContainer, posX , posY, "", gapHandler);			gapInputH.width = 36;			var gapInputV:InputText = new InputText(_layoutVBoxContainer, gapInputH.x + gapInputH.width + 2, posY, "", gapHandler);			gapInputV.width = 36;			gapInputH.name = "horizontal";			gapInputV.name = "vertical";			posY = gapInputV.y + gapInputV.height + 2;			// padding			var paddingLabel:Label = new Label(_layoutVBoxContainer, posX, posY, "padding (top, left, right, bottom)");			posY = paddingLabel.y + paddingLabel.height;			var paddingInputT:InputText = new InputText(_layoutVBoxContainer, posX, posY, "", paddingHandler);			paddingInputT.width = 36;			var paddingInputL:InputText = new InputText(_layoutVBoxContainer, paddingInputT.x + paddingInputT.width + 2, posY, "", paddingHandler);			paddingInputL.width = 36;			var paddingInputR:InputText = new InputText(_layoutVBoxContainer, paddingInputL.x + paddingInputL.width + 2, posY, "", paddingHandler);			paddingInputR.width = 36;			var paddingInputB:InputText = new InputText(_layoutVBoxContainer, paddingInputR.x + paddingInputR.width + 2, posY, "", paddingHandler);			paddingInputB.width = 36;			paddingInputT.name = "top";			paddingInputL.name = "left";			paddingInputR.name = "right";			paddingInputB.name = "bottom";			posY = paddingInputB.y + paddingInputB.height + 2;			// align			var alignLabel:Label = new Label(_layoutVBoxContainer, posX, posY, "alignment");			posY = alignLabel.y + alignLabel.height;			var alignSelect:ComboBox = new ComboBox();			alignSelect.addEventListener(Event.SELECT, alignHandler);			alignSelect.defaultLabel = "ALIGNMENT";			alignSelect.width = 150;			alignSelect.height = 18;			alignSelect.x = posX;			alignSelect.y = posY;			alignSelect.addItem({label:"TOP LEFT", data:VBoxUI.ALIGN_TOP_LEFT});			alignSelect.addItem({label:"TOP CENTER", data:VBoxUI.ALIGN_TOP_CENTER});			alignSelect.addItem({label:"TOP RIGHT", data:VBoxUI.ALIGN_TOP_RIGHT});			alignSelect.addItem({label:"BOTTOM LEFT", data:VBoxUI.ALIGN_BOTTOM_LEFT});			alignSelect.addItem({label:"BOTTOM CENTER", data:VBoxUI.ALIGN_BOTTOM_CENTER});			alignSelect.addItem({label:"BOTTOM RIGHT", data:VBoxUI.ALIGN_BOTTOM_RIGHT});			alignSelect.numVisibleItems = 6;			alignSelect.openPosition = ComboBox.TOP;			_layoutVBoxContainer.addChild(alignSelect);			// properties			_inputs['vbox'].gapH = gapInputH;			_inputs['vbox'].gapV = gapInputV;			_inputs['vbox'].paddingT = paddingInputT;			_inputs['vbox'].paddingL = paddingInputL;			_inputs['vbox'].paddingR = paddingInputR;			_inputs['vbox'].paddingB = paddingInputB;			_inputs['vbox'].align = alignSelect;		}				private function createLayoutTile():void {			// container			_layoutTileContainer = new Sprite();			_layoutTileContainer.x = 3;			_layoutTileContainer.y = _layoutContainer.y + _layoutContainer.height + 10;			_layoutTileContainer.visible = false;			addChild(_layoutTileContainer);			// common			addCommonProperties(_layoutTileContainer);			// properties			var posX:Number = 10;			var posY:Number = 87;			// gap			var gapLabel:Label = new Label(_layoutTileContainer, posX, posY, "gap (horizontal, vertical)");			posY = gapLabel.y + gapLabel.height;			var gapInputH:InputText = new InputText(_layoutTileContainer, posX , posY, "", gapHandler);			gapInputH.width = 36;			var gapInputV:InputText = new InputText(_layoutTileContainer, gapInputH.x + gapInputH.width + 2, posY, "", gapHandler);			gapInputV.width = 36;			gapInputH.name = "horizontal";			gapInputV.name = "vertical";			posY = gapInputV.y + gapInputV.height + 2;			// padding			var paddingLabel:Label = new Label(_layoutTileContainer, posX, posY, "padding (top, left, right, bottom)");			posY = paddingLabel.y + paddingLabel.height;			var paddingInputT:InputText = new InputText(_layoutTileContainer, posX, posY, "", paddingHandler);			paddingInputT.width = 36;			var paddingInputL:InputText = new InputText(_layoutTileContainer, paddingInputT.x + paddingInputT.width + 2, posY, "", paddingHandler);			paddingInputL.width = 36;			var paddingInputR:InputText = new InputText(_layoutTileContainer, paddingInputL.x + paddingInputL.width + 2, posY, "", paddingHandler);			paddingInputR.width = 36;			var paddingInputB:InputText = new InputText(_layoutTileContainer, paddingInputR.x + paddingInputR.width + 2, posY, "", paddingHandler);			paddingInputB.width = 36;			paddingInputT.name = "top";			paddingInputL.name = "left";			paddingInputR.name = "right";			paddingInputB.name = "bottom";			posY = paddingInputB.y + paddingInputB.height + 2;			// align			var alignLabel:Label = new Label(_layoutTileContainer, posX, posY, "alignment");			posY = alignLabel.y + alignLabel.height;			var alignSelect:ComboBox = new ComboBox();			alignSelect.addEventListener(Event.SELECT, alignHandler);			alignSelect.defaultLabel = "ALIGNMENT";			alignSelect.width = 150;			alignSelect.height = 18;			alignSelect.x = posX;			alignSelect.y = posY;			alignSelect.addItem({label:"TOP LEFT", data:TileUI.ALIGN_TOP_LEFT});			alignSelect.addItem({label:"TOP RIGHT", data:TileUI.ALIGN_TOP_RIGHT});			alignSelect.addItem({label:"BOTTOM LEFT", data:TileUI.ALIGN_BOTTOM_LEFT});			alignSelect.addItem({label:"BOTTOM RIGHT", data:TileUI.ALIGN_BOTTOM_RIGHT});			alignSelect.numVisibleItems = 4;			alignSelect.openPosition = ComboBox.TOP;			posY = alignSelect.y + alignSelect.height + 2;			// direction			var directionLabel:Label = new Label(_layoutTileContainer, posX, posY, "direction");			posY = directionLabel.y + directionLabel.height;			var directionSelect:ComboBox = new ComboBox();			directionSelect.addEventListener(Event.SELECT, directionHandler);			directionSelect.defaultLabel = "DIRECTION";			directionSelect.width = 150;			directionSelect.height = 18;			directionSelect.x = posX;			directionSelect.y = posY;			directionSelect.addItem({label:"HORIZONTAL", data:TileUI.DIRECTION_HORIZONTAL});			directionSelect.addItem({label:"VERTICAL", data:TileUI.DIRECTION_VERTICAL});			directionSelect.numVisibleItems = 2;			directionSelect.openPosition = ComboBox.TOP;			_layoutTileContainer.addChild(directionSelect);			_layoutTileContainer.addChild(alignSelect);			// properties			_inputs['tile'].gapH = gapInputH;			_inputs['tile'].gapV = gapInputV;			_inputs['tile'].paddingT = paddingInputT;			_inputs['tile'].paddingL = paddingInputL;			_inputs['tile'].paddingR = paddingInputR;			_inputs['tile'].paddingB = paddingInputB;			_inputs['tile'].align = alignSelect;			_inputs['tile'].direction = directionSelect;		}				private function colorHandler(e:Event):void {			_currentLayout.backgroundColor = ColorChooser(e.currentTarget).value;			_currentLayout.refresh();		}		private function alphaHandler(e:Event):void {			_currentLayout.backgroundAlpha = HUISlider(e.currentTarget).value;			_currentLayout.refresh();		}				private function hideHandler(e:Event):void {			_currentLayout.hideOutsideContent = CheckBox(e.currentTarget).selected;			_currentLayout.refresh();		}				private function enableHandler(e:Event):void {			_currentLayout.enable = CheckBox(e.currentTarget).selected;			_currentLayout.refresh();		}				private function childrenEnableHandler(e:Event):void {			if (_currentLayout.hasOwnProperty("childrenEnable")) {				_currentLayout["childrenEnable"] = CheckBox(e.currentTarget).selected;				_currentLayout.refresh();			}		}				private function gapHandler(e:Event):void {			var propName:String = e.currentTarget.name;			if (_currentLayout['childrenGap'].hasOwnProperty(propName)) {				_currentLayout['childrenGap'][propName] = e.currentTarget.text;			}			_currentLayout.refresh();		}		private function paddingHandler(e:Event):void {			var propName:String = e.currentTarget.name;			if (_currentLayout['childrenPadding'].hasOwnProperty(propName)) {				_currentLayout['childrenPadding'][propName] = e.currentTarget.text;			}			_currentLayout.refresh();		}				private function alignHandler(e:Event):void {			_currentLayout['childrenAlign'] = ComboBox(e.currentTarget).selectedItem.data;			_currentLayout.refresh();		}				private function directionHandler(e:Event):void {			_currentLayout['childrenDirection'] = ComboBox(e.currentTarget).selectedItem.data;			_currentLayout.refresh();		}				private function addLayoutHandler(e:Event):void {			if (_selectAddLayouts.selectedItem == null) return;			dispatchEvent(new ObjectEvent(ObjectEvent.ADD, _selectAddLayouts.selectedItem.data));		}		private function removeLayoutHandler(e:Event):void {			if (_selectLayouts.selectedItem == null || !(_selectLayouts.selectedItem.data is LayoutUI)) return;			dispatchEvent(new ObjectEvent(ObjectEvent.REMOVE, null, _selectLayouts.selectedItem.data));		}				private function selectObjectsHandler(e:Event):void {			if (_selectLayouts.selectedItem.label == "stage") dispatchEvent(new ObjectEvent(ObjectEvent.SELECT));			else dispatchEvent(new ObjectEvent(ObjectEvent.SELECT, _selectLayouts.selectedItem.label, _selectLayouts.selectedItem.data));		}				private function setIndex():void {			setChildIndex(_layoutContainer, numChildren-1);			_layoutContainer.setChildIndex(_selectLayouts, _layoutContainer.numChildren-1);			_layoutContainer.setChildIndex(_selectAddLayouts, _layoutContainer.numChildren-1);		}				private function update():void {			if (_selectLayouts.selectedItem != null && _selectLayouts.selectedItem.data != _currentLayout) {				var items:Array = _selectLayouts.items;				for (var i:int=0; i<items.length; ++i) {					if (items[i].data == _currentLayout) {						_selectLayouts.selectedItem = items[i];						break;					}				}			}			if (_currentLayout is CanvasUI) {				updateCommonproperties("canvas");				showLayoutContainer("canvas");			}			else if (_currentLayout is HBoxUI) {				updateCommonproperties("hbox");				updateHBox();			}			else if (_currentLayout is VBoxUI) {				updateCommonproperties("vbox");				updateVBox();			}			else if (_currentLayout is TileUI) {				updateCommonproperties("tile");				updateTile();			}		}				private function updateCommonproperties(layout:String):void {			ColorChooser(_inputs[layout].color).value = _currentLayout.backgroundColor;			HUISlider(_inputs[layout].alpha).value = _currentLayout.backgroundAlpha;			CheckBox(_inputs[layout].hide).selected = _currentLayout.hideOutsideContent;			CheckBox(_inputs[layout].enable).selected = _currentLayout.enable;			CheckBox(_inputs[layout].childrenEnable).selected = _currentLayout["childrenEnable"];
		}		private function updateHBox():void {			var hbox:HBoxUI = HBoxUI(_currentLayout);			if (hbox == null || _inputs["hbox"] == null) return;			// gap			_inputs["hbox"].gapH.text = hbox.childrenGap.horizontal;			_inputs["hbox"].gapV.text = hbox.childrenGap.vertical;			// padding			_inputs["hbox"].paddingT.text = hbox.childrenPadding.top;			_inputs["hbox"].paddingL.text = hbox.childrenPadding.left;			_inputs["hbox"].paddingR.text = hbox.childrenPadding.right;			_inputs["hbox"].paddingB.text = hbox.childrenPadding.bottom;			// align			var align:ComboBox = _inputs["hbox"].align;			var items:Array = align.items;			for (var i:int=0; i<items.length; ++i) {				if (items[i].data == hbox.childrenAlign) {					align.selectedItem = items[i];					break;				}			}			// show layout			showLayoutContainer("hbox");		}				private function updateVBox():void {			var vbox:VBoxUI = VBoxUI(_currentLayout);			if (vbox == null || _inputs["vbox"] == null) return;			// gap			_inputs["vbox"].gapH.text = vbox.childrenGap.horizontal;			_inputs["vbox"].gapV.text = vbox.childrenGap.vertical;			// padding			_inputs["vbox"].paddingT.text = vbox.childrenPadding.top;			_inputs["vbox"].paddingL.text = vbox.childrenPadding.left;			_inputs["vbox"].paddingR.text = vbox.childrenPadding.right;			_inputs["vbox"].paddingB.text = vbox.childrenPadding.bottom;			// align			var align:ComboBox = _inputs["vbox"].align;			var items:Array = align.items;			for (var i:int=0; i<items.length; ++i) {				if (items[i].data == vbox.childrenAlign) {					align.selectedItem = items[i];					break;				}			}			// show layout			showLayoutContainer("vbox");		}				private function updateTile():void {			var tile:TileUI = TileUI(_currentLayout);			if (tile == null || _inputs["tile"] == null) return;			// gap			_inputs["tile"].gapH.text = tile.childrenGap.horizontal;			_inputs["tile"].gapV.text = tile.childrenGap.vertical;			// padding			_inputs["tile"].paddingT.text = tile.childrenPadding.top;			_inputs["tile"].paddingL.text = tile.childrenPadding.left;			_inputs["tile"].paddingR.text = tile.childrenPadding.right;			_inputs["tile"].paddingB.text = tile.childrenPadding.bottom;			// align			var align:ComboBox = _inputs["tile"].align;			var items:Array = align.items;			for (var i:int=0; i<items.length; ++i) {				if (items[i].data == tile.childrenAlign) {					align.selectedItem = items[i];					break;				}			}			// align			var direction:ComboBox = _inputs["tile"].direction;			var itemsD:Array = direction.items;			for (var j:int=0; j<itemsD.length; ++j) {				if (itemsD[j].data == tile.childrenDirection) {					direction.selectedItem = itemsD[j];					break;				}			}			// show layout			showLayoutContainer("tile");		}				private function showLayoutContainer(type:String):void {			// hide
			_layoutCanvasContainer.visible = false;			_layoutHBoxContainer.visible = false;			_layoutVBoxContainer.visible = false;			_layoutTileContainer.visible = false;			// show			switch (type) {
				case "canvas":					_layoutCanvasContainer.visible = true;					break;				case "hbox":					_layoutHBoxContainer.visible = true;					break;				case "vbox":					_layoutVBoxContainer.visible = true;					break;				case "tile":					_layoutTileContainer.visible = true;					break;			}		}		// PUBLIC		//________________________________________________________________________________________________				public function show():void {			visible = true;		}				public function selectLayout(layout:LayoutUI):void {			_currentLayout = layout;			update();
		}				public function selectLast():void {
			if (_selectLayouts.items.length > 1) {				_selectLayouts.selectedIndex = _selectLayouts.items.length-1;
			}		}				public function addLayout(name:String, object:LayoutUI):void {			var item:Object = {label:name, data:object};			_selectLayouts.addItem(item);			_selectLayouts.selectedItem = item;		}		public function removeLayout(name:String):void {			var arr:Array = _selectLayouts.items;			for (var i:int = 0; i<arr.length; ++i) {				if (arr[i].label == name) {					_currentLayout = null;					_selectLayouts.removeItemAt(i);					_selectLayouts.defaultLabel = "SELECT LAYOUT";					break;				}			}			_layoutCanvasContainer.visible = false;			_layoutHBoxContainer.visible = false;			_layoutVBoxContainer.visible = false;			_layoutTileContainer.visible = false;		}					}}