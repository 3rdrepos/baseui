package com.soundstep.baseui.demo.views {	import com.bit101.components.CheckBox;	import com.bit101.components.ComboBox;	import com.bit101.components.Label;	import com.bit101.components.PushButton;	import com.soma.ui.ElementUI;	import com.soma.ui.layouts.LayoutUI;	import com.soundstep.baseui.demo.constants.ObjectConstant;	import com.soundstep.baseui.demo.events.ObjectEvent;	import com.soundstep.baseui.demo.views.core.Panel;	import flash.display.DisplayObject;	import flash.display.Sprite;	import flash.events.Event;	import flash.events.MouseEvent;	import flash.geom.Rectangle;	import flash.utils.Dictionary;	/**	 * <b>Author:</b> Romuald Quantin - <a href="http://www.soundstep.com/" target="_blank">www.soundstep.com</a><br />	 * <b>Company:</b> Less Rain - <a href="http://www.lessrain.com/" target="_blank">www.lessrain.com</a><br />	 * <b>Class version:</b> 1.0<br />	 * <b>Actionscript version:</b> 3.0<br />	 * <b>Copyright:</b> 	 * <br />	 * <b>Date:</b> Feb 16, 2010<br />	 * <b>Usage:</b>	 * @example	 * <listing version="3.0"></listing>	 */		public class ObjectPanel extends Panel {		//------------------------------------		// private, protected properties		//------------------------------------				private var _layoutContainer:Sprite;		private var _flexLayoutContainer:Sprite;		private var _optionsContainer:Sprite;		private var _rectContainer:Sprite;		private var _ratioContainer:Sprite;				private var _bypassRefresh:Boolean = false;				private var _flexLayout:FlexLayout;				private var _cbH1:CheckBox;		private var _cbH2:CheckBox;		private var _cbH3:CheckBox;		private var _cbV1:CheckBox;		private var _cbV2:CheckBox;		private var _cbV3:CheckBox;				private var _fieldWidth:InputTextExtended;		private var _fieldHeight:InputTextExtended;		private var _fieldX:InputTextExtended;		private var _fieldY:InputTextExtended;		private var _fieldLeft:InputTextExtended;		private var _fieldHCenter:InputTextExtended;		private var _fieldRight:InputTextExtended;		private var _fieldTop:InputTextExtended;		private var _fieldVCenter:InputTextExtended;		private var _fieldBottom:InputTextExtended;				private var _fieldValues:Dictionary;		private var _cbProperties:Dictionary;				private var _addObject:PushButton;		private var _selectAddObjects:ComboBox;				private var _removeObject:PushButton;				private var _selectObjects:ComboBox;				private var _currentElement:ElementUI;				private var _cbRect:CheckBox;		private var _fieldRectX:InputTextExtended;		private var _fieldRectY:InputTextExtended;		private var _fieldRectWidth:InputTextExtended;		private var _fieldRectHeight:InputTextExtended;				private var _selectRatio:ComboBox;		private var _selectAlignX:ComboBox;		private var _selectAlignY:ComboBox;				private var _enable:CheckBox;		private var _rounded:CheckBox;				//------------------------------------		// public properties		//------------------------------------				public static const WIDTH:Number = 250;		public static const HEIGHT:Number = 416;				//------------------------------------		// constructor		//------------------------------------				public function ObjectPanel() {			super("OBJECT PANEL", WIDTH, HEIGHT);		}				//		// PRIVATE, PROTECTED		//________________________________________________________________________________________________				override protected function initialize():void {			super.initialize();			visible = false;			_fieldValues = new Dictionary();			_cbProperties = new Dictionary();			createFlexLayout();			createOptions();			createLayout();		}				private function createLayout():void {			// container			_layoutContainer = new Sprite();			_layoutContainer.x = 3;			_layoutContainer.y = 15;			addChild(_layoutContainer);			var posY:Number = 5;			// create object			var labelAddObject:Label = new Label(_layoutContainer, 10, posY, "create object");			posY = labelAddObject.y + labelAddObject.height;			_selectAddObjects = new ComboBox(_layoutContainer, 10, posY, "ADD OBJECT");			_selectAddObjects.width = 150;			_selectAddObjects.height = 18;			_selectAddObjects.addItem({label:"square", data:ObjectConstant.SQUARE});			_selectAddObjects.addItem({label:"square centered", data:ObjectConstant.SQUARE_CENTERED});			_selectAddObjects.addItem({label:"square inverted", data:ObjectConstant.SQUARE_INVERTED});			_selectAddObjects.addItem({label:"square animated", data:ObjectConstant.SQUARE_ANIMATED});			_selectAddObjects.addItem({label:"image", data:ObjectConstant.IMAGE});			_selectAddObjects.addItem({label:"textfield", data:ObjectConstant.TEXTFIELD});			_selectAddObjects.addItem({label:"grid", data:ObjectConstant.GRID});			posY = _selectAddObjects.y + _selectAddObjects.height;			_addObject = new PushButton(_layoutContainer, (_selectAddObjects.x + _selectAddObjects.width + 5), _selectAddObjects.y, "ADD", addObjectHandler);			_addObject.width = 60;			_addObject.height = 18;			// select			var labelSelectObject:Label = new Label(_layoutContainer, 10, posY, "select object");			posY = labelSelectObject.y + labelSelectObject.height;			_selectObjects = new ComboBox();			_selectObjects.addEventListener(Event.SELECT, selectObjectsHandler);			_selectObjects.defaultLabel = "SELECT OBJECT";			_selectObjects.width = 150;			_selectObjects.height = 18;			_selectObjects.x = 10;			_selectObjects.y = posY;			_layoutContainer.addChild(_selectObjects);			_removeObject = new PushButton(_layoutContainer, (_selectObjects.x + _selectObjects.width + 5), _selectObjects.y, "REMOVE", removeObjectHandler);			_removeObject.width = 60;			_removeObject.height = 18;		}				private function addObjectHandler(e:Event):void {			if (_selectAddObjects.selectedItem == null) return;			dispatchEvent(new ObjectEvent(ObjectEvent.ADD, _selectAddObjects.selectedItem.data));		}		private function removeObjectHandler(e:Event):void {			if (_selectObjects.selectedItem == null) return;			dispatchEvent(new ObjectEvent(ObjectEvent.REMOVE, null, _selectObjects.selectedItem.data));		}		private function createFlexLayout():void {			// container			_flexLayoutContainer = new Sprite();			_flexLayoutContainer.x = 40;			_flexLayoutContainer.y = 105;			addChild(_flexLayoutContainer);			var marginLeft:Number = 10;			var marginTop:Number = 50;			// layout			_flexLayout = new FlexLayout(); // size is 155 * 135			_flexLayout.x = marginLeft;			_flexLayout.y = marginTop+15;			_flexLayoutContainer.addChild(_flexLayout);			// fields			_fieldWidth = new InputTextExtended(_flexLayoutContainer, _flexLayout.x+20, 0);			_fieldWidth.width = 50;			setInputField(_fieldWidth);			_fieldHeight = new InputTextExtended(_flexLayoutContainer, _flexLayout.x+_flexLayout.width-50, 0);			_fieldHeight.width = 50;			setInputField(_fieldHeight);			_fieldX = new InputTextExtended(_flexLayoutContainer, _flexLayout.x+20, 20);			_fieldX.width = 50;			setInputField(_fieldX);			_fieldY = new InputTextExtended(_flexLayoutContainer, _flexLayout.x+_flexLayout.width-50, 20);			_fieldY.width = 50;			setInputField(_fieldY);			new Label(_flexLayoutContainer, _fieldWidth.x - 30, 0, "width");			new Label(_flexLayoutContainer, _fieldHeight.x - 30, 0, "height");			new Label(_flexLayoutContainer, _fieldX.x - 12, _fieldX.y, "X");			new Label(_flexLayoutContainer, _fieldY.x - 12, _fieldY.y, "Y");			// checkbox			_cbH1 = new CheckBox(_flexLayoutContainer, _flexLayout.x+5, _flexLayout.y-15, "", checkboxHandler);			_cbProperties["left"] = _cbH1;			_cbH2 = new CheckBox(_flexLayoutContainer, (_flexLayout.width >> 1) + _flexLayout.x - 5, _flexLayout.y-15, "", checkboxHandler);			_cbProperties["horizontalCenter"] = _cbH2;			_cbH3 = new CheckBox(_flexLayoutContainer, _flexLayout.width + _flexLayout.x - 15, marginTop, "", checkboxHandler);			_cbProperties["right"] = _cbH3;			_cbV1 = new CheckBox(_flexLayoutContainer, _flexLayout.x-15, _flexLayout.y+5, "", checkboxHandler);			_cbProperties["top"] = _cbV1;			_cbV2 = new CheckBox(_flexLayoutContainer, _flexLayout.x-15, (_flexLayout.height >> 1) + _flexLayout.y -5, "", checkboxHandler);			_cbProperties["verticalCenter"] = _cbV2;			_cbV3 = new CheckBox(_flexLayoutContainer, _flexLayout.x-15, _flexLayout.height + _flexLayout.y - 15, "", checkboxHandler);			_cbProperties["bottom"] = _cbV3;			// fields layout			_fieldTop = new InputTextExtended(_flexLayoutContainer, _flexLayout.x + _flexLayout .width + 5, _flexLayout.y+7);			_fieldTop.width = 30;			_fieldValues["top"] = _fieldTop;			setInputField(_fieldTop);			_fieldVCenter = new InputTextExtended(_flexLayoutContainer, _flexLayout.x + _flexLayout .width + 5, _flexLayout.y + (_flexLayout.height>>1) - 9);			_fieldVCenter.width = 30;			_fieldValues["verticalCenter"] = _fieldVCenter;			setInputField(_fieldVCenter);			_fieldBottom = new InputTextExtended(_flexLayoutContainer, _flexLayout.x + _flexLayout .width + 5, _flexLayout.y + _flexLayout.height - 24);			_fieldBottom.width = 30;			_fieldValues["bottom"] = _fieldBottom;			setInputField(_fieldBottom);			_fieldLeft = new InputTextExtended(_flexLayoutContainer, _flexLayout.x, _flexLayout.y + _flexLayout.height + 5);			_fieldLeft.width = 30;			_fieldValues["left"] = _fieldLeft;			setInputField(_fieldLeft);			_fieldHCenter = new InputTextExtended(_flexLayoutContainer, _flexLayout.x + (_flexLayout.width>>1) - 15, _flexLayout.y + _flexLayout.height + 5);			_fieldHCenter.width = 30;			_fieldValues["horizontalCenter"] = _fieldHCenter;			setInputField(_fieldHCenter);			_fieldRight = new InputTextExtended(_flexLayoutContainer, _flexLayout.x + _flexLayout.width - 30, _flexLayout.y + _flexLayout.height + 5);			_fieldRight.width = 30;			_fieldValues["right"] = _fieldRight;			setInputField(_fieldRight);		}				private function createOptions():void {			// options container			_optionsContainer = new Sprite();			_optionsContainer.x = 3;			_optionsContainer.y = 340;			addChild(_optionsContainer);			createRect();			createRatio();			createEnable();			createRounded();		}				private function createRect():void {			// rect container			_rectContainer = new Sprite();			_rectContainer.x = 10;			_optionsContainer.addChild(_rectContainer);			// rect checkbox			var posX:Number = 0;			_cbRect = new CheckBox(_rectContainer, 0, 0, "rect", rectHandler);			_cbRect.y = 3;			posX = _cbRect.x + _cbRect.width + 5;			// rect X			var labelRectX:Label = new Label(_rectContainer, posX, 0, "X");			posX = labelRectX.x + labelRectX.width + 2;			_fieldRectX = new InputTextExtended(_rectContainer, posX);			_fieldRectX.width = 30;			setInputField(_fieldRectX);			posX = _fieldRectX.x + _fieldRectX.width + 2;			// rect Y			var labelRectY:Label = new Label(_rectContainer, posX, 0, "Y");			posX = labelRectY.x + labelRectY.width + 2;			_fieldRectY = new InputTextExtended(_rectContainer, posX);			_fieldRectY.width = 30;			setInputField(_fieldRectY);			posX = _fieldRectY.x + _fieldRectY.width + 2;			// rect width			var labelRectWidth:Label = new Label(_rectContainer, posX, 0, "W");			posX = labelRectWidth.x + labelRectWidth.width + 2;			_fieldRectWidth = new InputTextExtended(_rectContainer, posX);			_fieldRectWidth.width = 30;			setInputField(_fieldRectWidth);			posX = _fieldRectWidth.x + _fieldRectWidth.width + 2;			// rect height			var labelRectHeight:Label = new Label(_rectContainer, posX, 0, "H");			posX = labelRectHeight.x + labelRectHeight.width + 2;			_fieldRectHeight = new InputTextExtended(_rectContainer, posX);			_fieldRectHeight.width = 30;			setInputField(_fieldRectHeight);			posX = _fieldRectHeight.x + _fieldRectHeight.width + 2;		}				private function createRatio():void {			// ratio container			_ratioContainer = new Sprite();			_ratioContainer.x = 10;			_ratioContainer.y = 28;			_optionsContainer.addChild(_ratioContainer);			var posX:Number = 0;			// select ratio			_selectRatio = new ComboBox();			_selectRatio.enabled =  false;			_selectRatio.addEventListener(Event.SELECT, ratioHandler);			_selectRatio.defaultLabel = "Ratio";			_selectRatio.addItem({label:"None", data:ElementUI.RATIO_NONE});			_selectRatio.addItem({label:"In", data:ElementUI.RATIO_IN});			_selectRatio.addItem({label:"Out", data:ElementUI.RATIO_OUT});			_selectRatio.numVisibleItems = 3;			_selectRatio.width = 57;			_selectRatio.height = 18;			_selectRatio.openPosition = ComboBox.TOP;			_ratioContainer.addChild(_selectRatio);			posX = _selectRatio.x + _selectRatio.width + 5;			// alignX			_selectAlignX = new ComboBox();			_selectAlignX.enabled =  false;			_selectAlignX.addEventListener(Event.SELECT, ratioHandler);			_selectAlignX.defaultLabel = "horizontal";			_selectAlignX.addItem({label:"left", data:ElementUI.ALIGN_LEFT});			_selectAlignX.addItem({label:"center", data:ElementUI.ALIGN_CENTER});			_selectAlignX.addItem({label:"right", data:ElementUI.ALIGN_RIGHT});			_selectAlignX.numVisibleItems = 3;			_selectAlignX.x = posX;			_selectAlignX.width = 85;			_selectAlignX.height = 18;			_selectAlignX.openPosition = ComboBox.TOP;			_ratioContainer.addChild(_selectAlignX);			posX = _selectAlignX.x + _selectAlignX.width + 5;			// alignY			_selectAlignY = new ComboBox();			_selectAlignY.enabled =  false;			_selectAlignY.addEventListener(Event.SELECT, ratioHandler);			_selectAlignY.defaultLabel = "vertical";			_selectAlignY.addItem({label:"top", data:ElementUI.ALIGN_TOP});			_selectAlignY.addItem({label:"center", data:ElementUI.ALIGN_CENTER});			_selectAlignY.addItem({label:"bottom", data:ElementUI.ALIGN_BOTTOM});			_selectAlignY.numVisibleItems = 3;			_selectAlignY.x = posX;			_selectAlignY.width = 75;			_selectAlignY.height = 18;			_selectAlignY.openPosition = ComboBox.TOP;			_ratioContainer.addChild(_selectAlignY);			posX = _selectAlignY.x + _selectAlignY.width + 5;		}				private function createEnable():void {			_enable = new CheckBox(_optionsContainer, 10, 52, "enable", enableHandler);			_optionsContainer.setChildIndex(_ratioContainer, _optionsContainer.numChildren-1);		}		private function createRounded():void {			_rounded = new CheckBox(_optionsContainer, _enable.x + _enable.width + 7, 52, "rounded", roundedHandler);			_optionsContainer.setChildIndex(_ratioContainer, _optionsContainer.numChildren-1);		}		private function enableHandler(e:Event):void {			if (_currentElement == null) {				CheckBox(e.currentTarget).selected = !CheckBox(e.currentTarget).selected;				return;			}			_currentElement.enable = CheckBox(e.currentTarget).selected;			refreshCurrentElement();		}		private function roundedHandler(e:Event):void {			if (_currentElement == null) {				CheckBox(e.currentTarget).selected = !CheckBox(e.currentTarget).selected;				return;			}			_currentElement.rounded = CheckBox(e.currentTarget).selected;			refreshCurrentElement();		}		private function ratioHandler(e:Event = null):void {			if (_currentElement == null) return;			switch (e.currentTarget) {				case _selectRatio:					_currentElement.ratio = _selectRatio.selectedItem.data;					break;				case _selectAlignX:					_currentElement.alignX = _selectAlignX.selectedItem.data;					break;				case _selectAlignY:					_currentElement.alignY = _selectAlignY.selectedItem.data;					break;			}			refreshCurrentElement();		}		private function rectHandler(e:MouseEvent = null):void {			if (_currentElement == null) {				_cbRect.selected = false;				return;			}			if (_cbRect.selected) {				_currentElement.rect = new Rectangle(0, 0, _currentElement.getInitialWidth(), _currentElement.getInitialHeight());			}			else {				_currentElement.rect = null;				_fieldRectX.text = "";				_fieldRectY.text = "";				_fieldRectWidth.text = "";				_fieldRectHeight.text = "";			}			refreshCurrentElement();		}		private function setInputField(field:InputTextExtended):void {			if (field == _fieldWidth || field == _fieldWidth) field.restrict = "0-9.";			else field.restrict = "0-9.\\-";			field.addEventListener(Event.CHANGE, changeHandler);		}				private function changeHandler(e:Event):void {			if (_currentElement == null) return;			var text:String = String(InputTextExtended(e.currentTarget).text);			if (text == "") return;			if (text.substr(text.length-1, 1) == ".") return;			if (text.substr(text.length-1, 1) == "-") return;			if (text.substr(0, 1) == "-" && text.length == 1) return;			var scaleXNeg:Boolean = (_currentElement.object.scaleX < 0);			var scaleYNeg:Boolean = (_currentElement.object.scaleY < 0);			switch (e.currentTarget) {				case _fieldWidth:					_currentElement.object.width = Number(_fieldWidth.text);					break;				case _fieldHeight:					_currentElement.object.height = Number(_fieldHeight.text);					break;				case _fieldX:					_currentElement.object.x = Number(_fieldX.text);					break;				case _fieldY:					_currentElement.object.y = Number(_fieldY.text);					break;				case _fieldLeft:					_currentElement.left = Number(_fieldLeft.text);					break;				case _fieldHCenter:					_currentElement.horizontalCenter = Number(_fieldHCenter.text);					break;				case _fieldRight:					_currentElement.right = Number(_fieldRight.text);					break;				case _fieldTop:					_currentElement.top = Number(_fieldTop.text);					break;				case _fieldVCenter:					_currentElement.verticalCenter = Number(_fieldVCenter.text);					break;				case _fieldBottom:					_currentElement.bottom = Number(_fieldBottom.text);					break;				case _fieldRectX:					_currentElement.rect.x = Number(_fieldRectX.text);					break;				case _fieldRectY:					_currentElement.rect.y = Number(_fieldRectY.text);					break;				case _fieldRectWidth:					_currentElement.rect.width = Number(_fieldRectWidth.text);					break;				case _fieldRectHeight:					_currentElement.rect.height = Number(_fieldRectHeight.text);					break;			}			if (scaleXNeg && _currentElement.object.scaleX > 0) _currentElement.object.scaleX *= -1;			if (scaleYNeg && _currentElement.object.scaleY > 0) _currentElement.object.scaleY *= -1;			refreshCurrentElement();		}		private function checkboxHandler(e:MouseEvent = null):void {			if (_currentElement == null) {				CheckBox(e.currentTarget).selected = !CheckBox(e.currentTarget).selected;				return;			}			_fieldWidth.enabled =  !(_cbH1.selected && _cbH3.selected);			_fieldHeight.enabled =  !(_cbV1.selected && _cbV3.selected);			_fieldX.enabled =  !(_cbH1.selected || _cbH2.selected || _cbH3.selected);			_fieldY.enabled =  !(_cbV1.selected || _cbV2.selected || _cbV3.selected);			_fieldLeft.enabled =  _cbH1.selected;			_fieldHCenter.enabled =  _cbH2.selected;			_fieldRight.enabled =  _cbH3.selected;			_fieldTop.enabled =  _cbV1.selected;			_fieldVCenter.enabled =  _cbV2.selected;			_fieldBottom.enabled =  _cbV3.selected;			setLayout();			// after a click			if (e == null) return;			switch (e.currentTarget) {				case _cbH1:					_cbH2.selected = false;					if (_cbH1.selected) {						_currentElement.horizontalCenter = NaN;						_currentElement.left = 0;					}					else {						_currentElement.left = NaN;					}					break;				case _cbH2:					_cbH1.selected = false;					_cbH3.selected = false;					_currentElement.left = NaN;					_currentElement.right = NaN;					if (_cbH2.selected) {						_currentElement.horizontalCenter = 0;					}					else {						_currentElement.horizontalCenter = NaN;					}					break;				case _cbH3:					_cbH2.selected = false;					if (_cbH3.selected) {						_currentElement.horizontalCenter = NaN;						_currentElement.right = 0;					}					else {						_currentElement.right = NaN;					}					break;				case _cbV1:					_cbV2.selected = false;					if (_cbV1.selected) {						_currentElement.verticalCenter = NaN;						_currentElement.top = 0;					}					else {						_currentElement.top = NaN;					}					break;				case _cbV2:					_cbV1.selected = false;					_cbV3.selected = false;					_currentElement.top = NaN;					_currentElement.bottom = NaN;					if (_cbV2.selected) {						_currentElement.verticalCenter = 0;					}					else {						_currentElement.verticalCenter = NaN;					}					break;				case _cbV3:					_cbV2.selected = false;					if (_cbV3.selected) {						_currentElement.verticalCenter = NaN;						_currentElement.bottom = 0;					}					else {						_currentElement.bottom = NaN;					}					break;			}			refreshCurrentElement();		}				private function setLayout():void {			var arr:Array = ["N","N","N","N","N","N",];			if (_cbH1.selected) arr[0] = "L";			if (_cbH2.selected) arr[1] = "C";			if (_cbH3.selected) arr[2] = "R";			if (_cbV1.selected) arr[3] = "T";			if (_cbV2.selected) arr[4] = "C";			if (_cbV3.selected) arr[5] = "B";			var fr:String = arr.join("-");			_flexLayout.gotoAndStop(fr);		}				private function refreshCurrentElement():void {			if (_bypassRefresh) return;			_currentElement.refresh();			if (_currentElement.object.parent != null && _currentElement.object.parent is LayoutUI && !(_currentElement.object is LayoutUI)){				LayoutUI(_currentElement.object.parent).refresh();			}			if (_currentElement.object is LayoutUI) {				LayoutUI(_currentElement.object).refresh();			}		}				private function selectObjectsHandler(e:Event):void {			dispatchEvent(new ObjectEvent(ObjectEvent.SELECT, _selectObjects.selectedItem.label, _selectObjects.selectedItem.data));		}		// PUBLIC		//________________________________________________________________________________________________				public function show():void {			visible = true;		}				public function addObject(name:String, object:DisplayObject, selectTheObject:Boolean = true):void {			var item:Object = {label:name, data:object};			_selectObjects.addItem(item);			if (selectTheObject) {				_selectObjects.selectedItem = item;			}		}		public function removeObject(name:String):void {			var arr:Array = _selectObjects.items;			for (var i:int = 0; i<arr.length; ++i) {				if (arr[i].label == name) {					_currentElement = null;					_selectObjects.removeItemAt(i);					_selectObjects.defaultLabel = "SELECT OBJECT";					break;				}			}			disableUI();		}				public function select(element:ElementUI):void {			if (element == null || element.object == null) return;			_currentElement = element;			if (_selectObjects.selectedItem == null || _selectObjects.selectedItem.data != element.object) {				var items:Array = _selectObjects.items;				for (var i:int=0; i<items.length; ++i) {					if (items[i].data == element.object) {						_selectObjects.selectedItem = items[i];						break;					}				}			}			if (_selectObjects.selectedItem == null) return;			update(_currentElement);		}				public function selectLast():void {
			if (_selectObjects.items.length > 0) {				_selectObjects.selectedIndex = _selectObjects.items.length-1;			}
		}				public function disableUI():void {			_currentElement = null;			_fieldWidth.enabled = false;			_fieldHeight.enabled = false;			_fieldX.enabled = false;			_fieldY.enabled = false;			_fieldLeft.enabled = false;			_fieldHCenter.enabled = false;			_fieldRight.enabled = false;			_fieldTop.enabled = false;			_fieldVCenter.enabled = false;			_fieldBottom.enabled = false;			_fieldRectX.enabled = false;			_fieldRectY.enabled = false;			_fieldRectWidth.enabled = false;			_fieldRectHeight.enabled = false;			_cbH1.enabled = false;			_cbH2.enabled = false;			_cbH3.enabled = false;			_cbV1.enabled = false;			_cbV2.enabled = false;			_cbV3.enabled = false;			_cbRect.enabled = false;			_enable.enabled = false;			_rounded.enabled = false;			_selectRatio.enabled = false;			_selectAlignX.enabled = false;			_selectAlignY.enabled = false;		}		public function update(element:ElementUI):void {			if (element != _currentElement || element == null || element.object == null) return;			_cbH1.enabled = true;			_cbH2.enabled = true;			_cbH3.enabled = true;			_cbV1.enabled = true;			_cbV2.enabled = true;			_cbV3.enabled = true;			_bypassRefresh = true;			if (_selectObjects.selectedItem == null || _selectObjects.selectedItem.data != element.object) {				var items:Array = _selectObjects.items;				for (var i:int=0; i<items.length; ++i) {
					if (items[i].data == element.object) {						_selectObjects.selectedItem = items[i];						break;
					}				}			}			// element ui			for (var prop:String in _fieldValues) {				CheckBox(_cbProperties[prop]).selected = (!isNaN(element[prop]));				InputTextExtended(_fieldValues[prop]).text = Number(element[prop]).toString();			}			checkboxHandler();			// properties			_fieldX.text = String(element.object.x);			_fieldY.text = String(element.object.y);			_fieldWidth.text = String(element.object.width);			_fieldHeight.text = String(element.object.height);			// rect			_cbRect.selected = (element.rect != null);			_cbRect.enabled = true;			_enable.enabled = true;			_rounded.enabled = true;			_fieldRectX.enabled = (element.rect != null);			_fieldRectY.enabled = (element.rect != null);			_fieldRectWidth.enabled = (element.rect != null);			_fieldRectHeight.enabled = (element.rect != null);			if (element.rect != null) {				_fieldRectX.text = String(element.rect.x);				_fieldRectY.text = String(element.rect.y);				_fieldRectWidth.text = String(element.rect.width);				_fieldRectHeight.text = String(element.rect.height);			}			// ratio			if (element.ratio == ElementUI.RATIO_IN || element.ratio == ElementUI.RATIO_OUT) {				_fieldWidth.enabled = false;				_fieldHeight.enabled = false;				_fieldX.enabled = false;				_fieldY.enabled = false;				_selectRatio.enabled = true;				_selectAlignX.enabled = true;				_selectAlignY.enabled = true;				if (element.ratio == ElementUI.RATIO_IN) _selectRatio.selectedIndex = 1; 				else if (element.ratio == ElementUI.RATIO_OUT) _selectRatio.selectedIndex = 2;				if (element.alignX == ElementUI.ALIGN_LEFT) _selectAlignX.selectedIndex = 0; 				else if (element.alignX == ElementUI.ALIGN_CENTER) _selectAlignX.selectedIndex = 1;				else if (element.alignX == ElementUI.ALIGN_RIGHT) _selectAlignX.selectedIndex = 2;				if (element.alignY == ElementUI.ALIGN_TOP) _selectAlignY.selectedIndex = 0; 				else if (element.alignY == ElementUI.ALIGN_CENTER) _selectAlignY.selectedIndex = 1;				else if (element.alignY == ElementUI.ALIGN_BOTTOM) _selectAlignY.selectedIndex = 2;			}			else {				_selectRatio.enabled = true;				_selectAlignX.enabled = false;				_selectAlignY.enabled = false;				_selectRatio.defaultLabel = "ratio";				_selectRatio.selectedIndex = 0;				_selectAlignX.defaultLabel = "horizontal";				_selectAlignX.selectedIndex = 1;				_selectAlignY.defaultLabel = "vertical";				_selectAlignY.selectedIndex = 1;			}			// enable			_enable.selected = element.enable;			// rounded			_rounded.selected = element.rounded;			_bypassRefresh = false;		}	}}