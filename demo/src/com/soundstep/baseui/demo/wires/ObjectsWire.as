package com.soundstep.baseui.demo.wires {	import com.soma.core.interfaces.IWire;	import com.soma.core.wire.Wire;	import com.soma.debugger.events.SomaDebuggerGCEvent;	import com.soma.ui.BaseUI;	import com.soma.ui.ElementUI;	import com.soma.ui.events.EventUI;	import com.soma.ui.layouts.CanvasUI;	import com.soma.ui.layouts.LayoutUI;	import com.soundstep.baseui.demo.events.ObjectEvent;	import com.soundstep.baseui.demo.models.ObjectsModel;	import com.soundstep.baseui.demo.views.LayoutPanel;	import flash.display.DisplayObject;	import flash.display.DisplayObjectContainer;	import flash.display.Sprite;	import flash.events.Event;	import flash.geom.Rectangle;	import flash.utils.Dictionary;	/**	 * <b>Author:</b> Romuald Quantin - <a href="http://www.soundstep.com/" target="_blank">www.soundstep.com</a><br />	 * <b>Company:</b> Less Rain - <a href="http://www.lessrain.com/" target="_blank">www.lessrain.com</a><br />	 * <b>Class version:</b> 1.0<br />	 * <b>Actionscript version:</b> 3.0<br />	 * <b>Copyright:</b> 	 * <br />	 * <b>Date:</b> Feb 16, 2010<br />	 * <b>Usage:</b>	 * @example	 * <listing version="3.0"></listing>	 */		public class ObjectsWire extends Wire implements IWire {		//------------------------------------		// private, protected properties		//------------------------------------				private var _baseUI:BaseUI;		private var _currentObject:DisplayObject;		private var _currentLayout:LayoutUI;		private var _elements:Dictionary;		//------------------------------------		// public properties		//------------------------------------				public static const NAME:String = "BD::ObjectsWire";				//------------------------------------		// constructor		//------------------------------------				public function ObjectsWire() {			super(NAME);		}				//		// PRIVATE, PROTECTED		//________________________________________________________________________________________________				override protected function initialize():void {			_baseUI = new BaseUI(stage);			_elements = new Dictionary();		}				private function setProperties(object:DisplayObject, element:ElementUI):void {			var properties:Object = model.getProperties(object.name);			for (var prop:String in properties) {				if (prop == "rect") {					element.rect = new Rectangle(properties[prop].x, properties[prop].y, properties[prop].width, properties[prop].height);				}				else {					element[prop] = properties[prop];				}			}			element.refresh();		}				private function childRemovedHandler(e:Event):void {			var object:DisplayObject = DisplayObject(e.currentTarget);			object.removeEventListener(Event.REMOVED_FROM_STAGE, childRemovedHandler);			disposeElement(object);			ui.removeObjectFromLayout(object.name, object);			model.destroyObject(object);			if (_currentObject == object) _currentObject = null;			if (_currentLayout == object)  _currentLayout = null;		}				private function disposeElement(object:DisplayObject):void {			if (_elements[object] != undefined) {				if (ElementUI(_elements[object]).baseUI != null) ElementUI(_elements[object]).baseUI.remove(object);				delete _elements[object];			}		}				private function updateHandler(e:EventUI):void {			UIWire(getWire(UIWire.NAME)).update(e.element);
		}		private function get container():Sprite {			return Sprite(getView(UIWire.NAME_VIEW_CONTAINER_OBJECTS));		}				private function get ui():UIWire {			return UIWire(getWire(UIWire.NAME));		}				private function get model():ObjectsModel {			return ObjectsModel(getModel(ObjectsModel.NAME));		}				private function get objects():Dictionary {			return model.objects;		}				// PUBLIC		//________________________________________________________________________________________________				public function get baseUI():BaseUI {			return _baseUI;		}				public function get layoutPanel():LayoutPanel {			return LayoutPanel(getView(UIWire.NAME_VIEW_LAYOUT_PANEL));		}		public function select(name:String):void {			if (name == null) {				// stage container has been selected				_currentObject = null;				_currentLayout = null;			} else {				_currentObject = objects[name];				if (_currentObject is LayoutUI) _currentLayout = LayoutUI(_currentObject);				dispatchEvent(new ObjectEvent(ObjectEvent.SELECTED, name, _currentObject));			}		}				public function add(type:String):void {			// container			var cont:DisplayObjectContainer = container;			var ref:DisplayObjectContainer = stage;			if (_currentLayout == null) {				cont = container;				ref = stage;			}			else {				cont = _currentLayout;				ref = _currentLayout;			}			// object			var object:DisplayObject = model.createObject(type, ref);			object.addEventListener(Event.REMOVED_FROM_STAGE, childRemovedHandler);			if (object == null) return;			cont.addChild(object);			if (object is LayoutUI) _elements[object] = LayoutUI(object).element;			else {				if (!(cont is LayoutUI)) {					_elements[object] = _baseUI.add(object);				}				else {					if (cont is CanvasUI) _elements[object] = CanvasUI(cont).getElement(object);				}			}						if (_elements[object] != null) {				_elements[object].addEventListener(EventUI.UPDATED, updateHandler);				if (!(cont is LayoutUI)) setProperties(object, _elements[object]);			}			ui.addObjectToLayout(object.name, object, !(_elements[object] == null));			if (cont is LayoutUI) LayoutUI(cont).refresh();			if (object is LayoutUI) LayoutUI(object).refresh();			dispatchEvent(new SomaDebuggerGCEvent(SomaDebuggerGCEvent.ADD_WATCHER, object.name, object));			dispatchEvent(new SomaDebuggerGCEvent(SomaDebuggerGCEvent.ADD_WATCHER, object.name + " (ElementUI)", _elements[object]));		}				public function remove(object:DisplayObject):void {			object.removeEventListener(Event.REMOVED_FROM_STAGE, childRemovedHandler);			ui.removeObjectFromLayout(object.name, object);			disposeElement(object);			if (object is LayoutUI) LayoutUI(object).dispose();			model.destroyObject(object);			object.parent.removeChild(object);			if (_currentObject == object) _currentObject = null;			if (_currentLayout == object)  _currentLayout = null;		}		public function getElementByObject(object:DisplayObject):ElementUI {			return _elements[object];		}	}}