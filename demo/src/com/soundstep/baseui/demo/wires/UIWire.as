package com.soundstep.baseui.demo.wires {	import com.soma.core.interfaces.IWire;	import com.soma.core.wire.Wire;	import com.soma.ui.ElementUI;	import com.soma.ui.layouts.LayoutUI;	import com.soundstep.baseui.demo.Main;	import com.soundstep.baseui.demo.SomaApplication;	import com.soundstep.baseui.demo.events.ObjectEvent;	import com.soundstep.baseui.demo.views.LayoutPanel;	import com.soundstep.baseui.demo.views.ObjectPanel;	import flash.display.DisplayObject;	import flash.display.Sprite;	import flash.events.Event;	import flash.utils.setTimeout;	/**	 * <b>Author:</b> Romuald Quantin - <a href="http://www.soundstep.com/" target="_blank">www.soundstep.com</a><br />	 * <b>Company:</b> Less Rain - <a href="http://www.lessrain.com/" target="_blank">www.lessrain.com</a><br />	 * <b>Class version:</b> 1.0<br />	 * <b>Actionscript version:</b> 3.0<br />	 * <b>Copyright:</b> 	 * <br />	 * <b>Date:</b> Feb 16, 2010<br />	 * <b>Usage:</b>	 * @example	 * <listing version="3.0"></listing>	 */		public class UIWire extends Wire implements IWire {		//------------------------------------		// private, protected properties		//------------------------------------						//------------------------------------		// public properties		//------------------------------------				public static const NAME:String = "BD::UIWire";		public static const NAME_VIEW_CONTAINER_OBJECTS:String = "BD::View.ContainerObjects";		public static const NAME_VIEW_OBJECT_PANEL:String = "BD::View.ObjectPanel";		public static const NAME_VIEW_LAYOUT_PANEL:String = "BD::View.LayoutPanel";				//------------------------------------		// constructor		//------------------------------------				public function UIWire() {			super(NAME);		}				//		// PRIVATE, PROTECTED		//________________________________________________________________________________________________				override protected function initialize():void {			var main:Main = SomaApplication(soma).app as Main;			// views			addView(NAME_VIEW_CONTAINER_OBJECTS, new Sprite());			main.addChild(containerObjects);			// object panel			var objectPanel:ObjectPanel = new ObjectPanel();			var elObjectPanel:ElementUI = objectsWire.baseUI.add(objectPanel);			elObjectPanel.top = elObjectPanel.right = 10;			addView(NAME_VIEW_OBJECT_PANEL, objectPanel);			main.addChild(objectPanel);			objectPanel.disableUI();			// layout panel			var layoutPanel:LayoutPanel = new LayoutPanel();			var elLayoutPanel:ElementUI = objectsWire.baseUI.add(layoutPanel);			elLayoutPanel.top = 10;			elLayoutPanel.right = ObjectPanel.WIDTH + 20;			addView(NAME_VIEW_LAYOUT_PANEL, layoutPanel);			main.addChild(layoutPanel);			// listeners			addEventListener(ObjectEvent.SELECTED, selectedHandler);			// delay to handle a Firefox/mac/swfobject bug where stageWidth and stageHeight are equal to 0			stage.addEventListener(Event.ENTER_FRAME, panelsDelayHandler);		}				private function panelsDelayHandler(e:Event):void {
			if (stage.stageWidth > 0 && stage.stageHeight > 0) {				stage.removeEventListener(Event.ENTER_FRAME, panelsDelayHandler);				// let the time to the components to be intialized				// so the window is at the right size				setTimeout(showPanels, 41);			}		}				private function showPanels():void {			if (objectPanel) {				objectPanel.show();				objectsWire.baseUI.getElement(objectPanel).refresh();			}			if (layoutPanel) {				layoutPanel.show();				objectsWire.baseUI.getElement(layoutPanel).refresh();			}		}		private function selectedHandler(e:ObjectEvent):void {			var el:ElementUI = objectsWire.getElementByObject(e.object);			if (el != null) {				objectPanel.select(el);			}			else {				objectPanel.disableUI();			}			if (e.object is LayoutUI) {				layoutPanel.selectLayout(LayoutUI(e.object));			}		}				private function get objectsWire():ObjectsWire {			return getWire(ObjectsWire.NAME) as ObjectsWire;		}				// PUBLIC		//________________________________________________________________________________________________				public function get objectPanel():ObjectPanel {			return ObjectPanel(getView(NAME_VIEW_OBJECT_PANEL));		}		public function get layoutPanel():LayoutPanel {			return LayoutPanel(getView(NAME_VIEW_LAYOUT_PANEL));		}		public function get containerObjects():Sprite {			return Sprite(getView(NAME_VIEW_CONTAINER_OBJECTS));		}				public function addObjectToLayout(name:String, object:DisplayObject, selectTheObject:Boolean = true):void {			objectPanel.addObject(name, object, selectTheObject);			if (object is LayoutUI) layoutPanel.addLayout(name, LayoutUI(object));		}				public function removeObjectFromLayout(name:String, object:DisplayObject):void {			objectPanel.removeObject(name);			if (object is LayoutUI) layoutPanel.removeLayout(name);			//layoutPanel.selectLast();			//objectPanel.selectLast();		}				public function update(element:ElementUI):void {			objectPanel.update(element);		}			}}