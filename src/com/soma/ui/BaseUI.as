/** * The contents of this file are subject to the Mozilla Public License * Version 1.1 (the "License"); you may not use this file except in compliance * with the License. You may obtain a copy of the License at *  * http://www.mozilla.org/MPL/ *  * Software distributed under the License is distributed on an "AS IS" basis, * WITHOUT WARRANTY OF ANY KIND, either express or implied. * See the License for the specific language governing rights and * limitations under the License. *  * The Original Code is BaseUI. *  * The Initial Developer of the Original Code is Romuald Quantin. * romu@soundstep.com (www.soundstep.com). *  * Portions created by *  * Initial Developer are Copyright (C) 2008-2010 Soundstep. All Rights Reserved. * All Rights Reserved. *  * BaseUI version: 4.0 * Actionscript version: 3.0 * Copyright: Mozilla Public License 1.1 (MPL 1.1) - http://www.opensource.org/licenses/mozilla1.1.php *  * You can use BaseUI in any flash site, except to include/distribute it in another framework, application, template, component or structure that is meant to build, scaffold or generate source files. *  */package com.soma.ui {		import flash.display.DisplayObject;	import flash.display.DisplayObjectContainer;	import flash.events.Event;	import flash.utils.Dictionary;	/**	 * Manage a list of elements (ElementUI) to be displayed related to a "reference".	 * The reference can be the stage, any DisplayObjectContainer (with proper size) or a LayoutUI instance (CanvasUI, HBoxUI, VBoxUI, TileUI).	 * The reference doesn't have to be a parent.	 * You can use the following properties to handle the position and size of the DisplayObject registered:	 * x, y, left, right, top, bottom, horizontalCenter, verticalCenter, ratio, alignX, alignY	 * 	 * @example	 * <listing version="3.0">	 * var baseUI:BaseUI = new BaseUI(stage);	 * var element:ElementUI = baseUI.add(mySprite);	 * element.addEventListener(EventUI.WILL_CALCULATE, willCalculateHandler);	 * element.addEventListener(EventUI.WILL_UPDATE, willUpdateHandler);	 * element.addEventListener(EventUI.UPDATED, updatedHandler);	 * element.right = 10;	 * element.bottom = 10;	 * element.refresh();	 * addChild(mySprite);	 * 	 * private function willCalculateHandler(event:EventUI):void {	 * 	   //event.preventDefault(); // stop the process before the calculation	 *     trace(event.element); // trace the ElementUI instance	 *     trace(event.element.object); // trace the DisplayObject instance	 *     trace(event.element.baseUI); // trace the BaseUI instance	 * }	 * 	 * private function willUpdateHandler(event:EventUI):void {	 * 	   //event.preventDefault(); // stop the process before new properties are applied to the DisplayObject	 * 	   trace(event.element); // trace the ElementUI instance	 * 	   trace(event.element.object); // trace the DisplayObject instance	 * 	   trace(event.element.baseUI); // trace the BaseUI instance	 * 	   trace(event.properties); // trace the properties that will be applied to the DisplayObject	 * }	 * 	 * private function updatedHandler(event:EventUI):void {	 * 	   trace(event.element); // trace the ElementUI instance	 * 	   trace(event.element.object); // trace the DisplayObject instance	 * 	   trace(event.element.baseUI); // trace the BaseUI instance	 * 	   trace(event.properties); // trace the properties that have been applied to the DisplayObject	 * }	 * </listing>	 * 	 * @see com.soma.ui.ElementUI	 * 	 */		public class BaseUI {		//------------------------------------		// private, protected properties		//------------------------------------				/** @private */		protected var _reference:DisplayObjectContainer;		/** @private */		protected var _objects:Dictionary;		/** @private */		protected var _objectsSorted:Array;		/** @private */		protected var _enable:Boolean = true;		//------------------------------------		// public properties		//------------------------------------								//------------------------------------		// constructor		//------------------------------------				/**		 * Create an instance of the BaseUI class		 * @param reference global DisplayObjectContainer instance used to calculate the size and position for the DisplayObject instances registered (reference can be specify later on, on each DisplayObject added). 		 */		public function BaseUI(reference:DisplayObjectContainer) {			_reference = reference;			initialize();		}				//		// PRIVATE, PROTECTED		//________________________________________________________________________________________________				/** @private */		protected function initialize():void {
			reset();			if (_reference.stage == null) _reference.addEventListener(Event.ADDED_TO_STAGE, referenceHandler);			else setResizeListener();		}				/** @private */		protected function setResizeListener():void {			_reference.stage.addEventListener(Event.RESIZE, resizeHandler);			updateElements();
		}				/** @private */		protected function reset():void {			if (_objectsSorted != null && _objectsSorted.length > 0) {				if (_objectsSorted != null) {					while (_objectsSorted.length > 0) {						delete _objects[_objectsSorted[0].object];						_objectsSorted[0].dispose();						_objectsSorted[0] = null;						_objectsSorted.splice(0, 1);					}				}			}			_objects = new Dictionary();			_objectsSorted = [];		}				/** @private */		protected function referenceHandler(e:Event):void {			_reference.removeEventListener(Event.ADDED_TO_STAGE, referenceHandler);			setResizeListener();		}				/** @private */		protected function resizeHandler(e:Event):void {			updateElements();
		}				/** @private */		protected function updateElements():void {			if (!_enable) return;			var i:Number = 0;			var l:Number = _objectsSorted.length;			for (i; i<l; ++i) {				ElementUI(_objectsSorted[i]).refresh();
			}
		}				// PUBLIC		//________________________________________________________________________________________________				/**		 * Add an element to the BaseUI list (DisplayObject like Sprite, MovieClip, TextField, Bitmap, ...)		 * @param obj DisplayObject instance of the element to be added to the BaseUI list		 * @return ElementUI instance to handle position and size properties		 */		public function add(obj:DisplayObject):ElementUI {			if (!_objects[obj]) {				var el:ElementUI = new ElementUI(this, obj, _reference);				_objects[obj] = el;				_objectsSorted[_objectsSorted.length] = el;				return el;
			}			return _objects[obj];		}				/**		 * Remove an element from the BaseUI list		 * @param obj DisplayObject instance of the element to be removed from the BaseUI list		 */		public function remove(obj:DisplayObject):void {
			if (_objects[obj]) {				var el:ElementUI = _objects[obj];				var i:Number = 0;				var l:Number = _objectsSorted.length;				for (i; i<l; ++i) {					if (_objectsSorted[i] == el) {						_objectsSorted.splice(i, 1);						break;					}				}				el.dispose();				el = null;				delete _objects[obj];			}		}				/**		 * Remove all elements from the BaseUI list		 */		public function removeAll():void {
			reset();
		}				/**		 * Whether or not the BaseUI instance contains the DisplayObject		 * @return Boolean		 */		public function contains(obj:DisplayObject):Boolean {			return (_objects[obj] != undefined);
		}				/**		 * Get a copy of the ElementUI list as an Array		 * @return return an Array containing all the ElementUI instances		 */		public function getElements():Array {//			var clone:Dictionary = new Dictionary();//			for (var obj:Obj in _ob) clone[name] = wires[name];//			return clone;			return _objectsSorted.concat();		}		/**		 * Get a copy of the ElementUI list as a Dictionary		 * @return return an Dictionary containing all the the ElementUI instances and the DisplayObject instances registered in the BaseUI instance. The key is the DisplayObject instance and the value is the ElementUI instance.		 */		public function getElementsAsDictionary():Dictionary {			var clone:Dictionary = new Dictionary();			for (var obj:Object in _objects) clone[obj] = _objects[obj];			return clone;		}		/**		 * Get an ElementUI instance		 * @param obj DisplayObject instance of the DisplayObject		 * @return return the ElementUI instance of the DisplayObject		 */		public function getElement(obj:DisplayObject):ElementUI {
			return _objects[obj];
		}				/**		 * Calculate and update the position and size of all the elements		 */		public function refresh():void {			updateElements();		}				/**		 * Destroys the BaseUI instance in order to be garbage collected (you must set the instance to null after the disposing).		 */		public function dispose():void {
			try {				removeAll();				_reference.removeEventListener(Event.ADDED_TO_STAGE, referenceHandler);				if (_reference.stage != null) _reference.stage.removeEventListener(Event.RESIZE, resizeHandler);				_reference = null;				_objects = null;			} catch(e:Error) {
				trace("Error in", this, "(dispose method):", e.message);
			}
		}				/**		 * Indicates wether or not the BaseUI instance will calculate the size and positions of the elements.		 * @default true		 */		public function get enable():Boolean {			return _enable;		}				public function set enable(value:Boolean):void {			_enable = value;		}	}}