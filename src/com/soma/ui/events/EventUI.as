/** * The contents of this file are subject to the Mozilla Public License * Version 1.1 (the "License"); you may not use this file except in compliance * with the License. You may obtain a copy of the License at *  * http://www.mozilla.org/MPL/ *  * Software distributed under the License is distributed on an "AS IS" basis, * WITHOUT WARRANTY OF ANY KIND, either express or implied. * See the License for the specific language governing rights and * limitations under the License. *  * The Original Code is BaseUI. *  * The Initial Developer of the Original Code is Romuald Quantin. * romu@soundstep.com (www.soundstep.com). *  * Portions created by *  * Initial Developer are Copyright (C) 2008-2010 Soundstep. All Rights Reserved. * All Rights Reserved. *  * BaseUI version: 4.0 * Actionscript version: 3.0 * Copyright: Mozilla Public License 1.1 (MPL 1.1) - http://www.opensource.org/licenses/mozilla1.1.php *  * You can use BaseUI in any flash site, except to include/distribute it in another framework, application, template, component or structure that is meant to build, scaffold or generate source files. *  */ package com.soma.ui.events {	import com.soma.ui.ElementUI;	import com.soma.ui.vo.PropertiesUI;	import flash.events.Event;	/**	 * The ElementUI class represents a DisplayObject.	 * You can use the following properties to handle the position and size of the DisplayObject registered:	 * x, y, left, right, top, bottom, horizontalCenter, verticalCenter, ratio, alignX, alignY	 * 	 * @example	 * <listing version="3.0">	 * var baseUI:BaseUI = new BaseUI(stage);	 * var element:ElementUI = baseUI.add(mySprite);	 * element.addEventListener(EventUI.WILL_CALCULATE, willCalculateHandler);	 * element.addEventListener(EventUI.WILL_UPDATE, willUpdateHandler);	 * element.addEventListener(EventUI.UPDATED, updatedHandler);	 * element.right = 10;	 * element.bottom = 10;	 * element.refresh();	 * addChild(mySprite);	 * 	 * private function willCalculateHandler(event:EventUI):void {	 * 	   //event.preventDefault(); // stop the process before the calculation	 *     trace(event.element); // trace the ElementUI instance	 *     trace(event.element.object); // trace the DisplayObject instance	 *     trace(event.element.baseUI); // trace the BaseUI instance	 * }	 * 	 * private function willUpdateHandler(event:EventUI):void {	 * 	   //event.preventDefault(); // stop the process before new properties are applied to the DisplayObject	 * 	   trace(event.element); // trace the ElementUI instance	 * 	   trace(event.element.object); // trace the DisplayObject instance	 * 	   trace(event.element.baseUI); // trace the BaseUI instance	 * 	   trace(event.properties); // trace the properties that will be applied to the DisplayObject	 * }	 * 	 * private function updatedHandler(event:EventUI):void {	 * 	   trace(event.element); // trace the ElementUI instance	 * 	   trace(event.element.object); // trace the DisplayObject instance	 * 	   trace(event.element.baseUI); // trace the BaseUI instance	 * 	   trace(event.properties); // trace the properties that have been applied to the DisplayObject	 * }	 * </listing>	 * 	 * @see com.soma.ui.BaseUI	 * @see com.soma.ui.ElementUI	 * @see com.soma.ui.vo.PropertiesUI	 * 	 */		public class EventUI extends Event {		//------------------------------------		// private, protected properties		//------------------------------------				//------------------------------------		// public properties		//------------------------------------				/**		 * Dispatched from a ElementUI instance, before making a calculation to a DisplayObject (cancelable), the event flow is: WILL_CALCULATE > WILL_UPDATE > UPDATED		 * @eventType com.soma.ui.events.EventUI.WILL_CALCULATE		 */		public static const WILL_CALCULATE:String = "BaseUI::EventUI.WILL_CALCULATE";		/**		 * Dispatched from a ElementUI instance, after a calculation and before making a change to a DisplayObject (cancelable), the event flow is: WILL_CALCULATE > WILL_UPDATE > UPDATED		 * @eventType com.soma.ui.events.EventUI.WILL_UPDATE		 */		public static const WILL_UPDATE:String = "BaseUI::EventUI.WILL_UPDATE";		/**		 * Dispatched from a ElementUI instance, after a DisplayObject has been updated, the event flow is: WILL_CALCULATE > WILL_UPDATE > UPDATED		 * @eventType com.soma.ui.events.EventUI.UPDATED		 */		public static const UPDATED:String = "BaseUI::EventUI.UPDATED";				/** DisplayObject instance */		public var object:Object;		/** ElementUI instance */		public var element:ElementUI;		/** Properties (x, y, width, height) that will be, or have been applied to the DisplayObject instance */		public var properties:PropertiesUI;		//------------------------------------		// constructor		//------------------------------------				/**		 * Create a EventUI event that contains information about the ElementUI and the DisplayObject instance		 * @param type The event type; indicates the action that triggered the event.		 * @param object DisplayObject instance		 * @param element ElementUI instance		 * @param properties Properties (x, y, width, height) that will be, or have been applied to the DisplayObject instance		 * @param bubbles Specifies whether or not the event can bubble up the display list hierarchy.		 * @param cancelable Specifies whether or not the behavior associated with the event can be prevented.		 */		public function EventUI(type:String, object:Object = null, element:ElementUI = null, properties:PropertiesUI = null, bubbles:Boolean = false, cancelable:Boolean = true) {			this.object = object;			this.element = element;			this.properties = properties;			super(type, bubbles, cancelable);		}				//		// PRIVATE, PROTECTED		//________________________________________________________________________________________________				//		// PUBLIC		//________________________________________________________________________________________________				/**		 * Create and return a copy of the EventUI instance		 * @return EventUI		 */		override public function clone():Event {			return new EventUI(type, object, element, properties, bubbles, cancelable);		}				/**		 * Pretty-prints the EventUI instance and its properties into a String		 * @return A String		 */		override public function toString():String {			return formatToString("EventBaseUI", "object", "element", "properties", "type", "bubbles", "cancelable", "eventPhase");		}			}}