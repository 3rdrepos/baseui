/** * The contents of this file are subject to the Mozilla Public License * Version 1.1 (the "License"); you may not use this file except in compliance * with the License. You may obtain a copy of the License at *  * http://www.mozilla.org/MPL/ *  * Software distributed under the License is distributed on an "AS IS" basis, * WITHOUT WARRANTY OF ANY KIND, either express or implied. * See the License for the specific language governing rights and * limitations under the License. *  * The Original Code is BaseUI. *  * The Initial Developer of the Original Code is Romuald Quantin. * romu@soundstep.com (www.soundstep.com). *  * Portions created by *  * Initial Developer are Copyright (C) 2008-2010 Soundstep. All Rights Reserved. * All Rights Reserved. *  * BaseUI version: 4.0 * Actionscript version: 3.0 * Copyright: Mozilla Public License 1.1 (MPL 1.1) - http://www.opensource.org/licenses/mozilla1.1.php *  * You can use BaseUI in any flash site, except to include/distribute it in another framework, application, template, component or structure that is meant to build, scaffold or generate source files. *  */ package com.soma.ui.layouts {	import com.soma.ui.BaseUI;	import com.soma.ui.ElementUI;	import flash.display.DisplayObject;	import flash.display.DisplayObjectContainer;	/**	 * The CanvasUI class extends the LayoutUI class and works in the same way,	 * but the children in the display list of the canvas are automatically added to an internal BaseUI instance.	 * The CanvasUI class provides the necessary methods to get the ElementUI instances of its children.	 * 	 * @example	 * <listing version="3.0">	 * var canvas:CanvasUI = new CanvasUI(stage, 400, 300);	 * canvas.backgroundColor = 0xFF0000;	 * canvas.backgroundAlpha = 0.2;	 * canvas.ratio = ElementUI.RATIO_IN;	 * addChild(canvas);	 * 	 * var sprite:Sprite = new Sprite();	 * sprite.graphics.beginFill(0xFF0000, .5);	 * sprite.graphics.drawRect(0, 0, 100, 100);	 * 	 * var element:ElementUI = canvas.add(sprite);	 * element.right = 10;	 * element.bottom = 10;	 * 		 * canvas.refresh();	 * </listing>	 * 	 * @see com.soma.ui.BaseUI	 * @see com.soma.ui.ElementUI	 * @see com.soma.ui.layouts.LayoutUI	 * 	 */		public class CanvasUI extends LayoutUI {		//------------------------------------		// private, protected properties		//------------------------------------				/** @private */		protected var _baseUI:BaseUI;		/** @private */		protected var _childrenEnable:Boolean = true;				//------------------------------------		// public properties		//------------------------------------								//------------------------------------		// constructor		//------------------------------------				/**		 * Create a CanvasUI instance		 * @param reference DisplayObjectContainer instance used to calculate the size and position of the layout instance		 * @param width width of the layout (not disturbed by children)		 * @param height height of the layout (not disturbed by children)		 * @see com.soma.ui.layouts.LayoutUI#getRealWidth()		 * @see com.soma.ui.layouts.LayoutUI#getRealHeight()		 */		public function CanvasUI(reference:DisplayObjectContainer, width:Number = 100, height:Number = 100) {			super(reference, width, height);		}		//		// PRIVATE, PROTECTED		//________________________________________________________________________________________________				/** @private */		override protected function initialize():void {			super.initialize();			_baseUI = new BaseUI(this);		}				/** @private */		protected function addToBaseUI(obj:DisplayObject):void {			_baseUI.add(obj);		}				/** @private */		protected function removeFromBaseUI(obj:DisplayObject):void {				if (_baseUI != null) _baseUI.remove(obj);		}		// PUBLIC		//________________________________________________________________________________________________				/** @inheritDoc */		override public function dispose():void {			// dispose objects, graphics and events listeners
			try {				if (_baseUI != null) {					_baseUI.dispose();					_baseUI = null;				}				super.dispose();			} catch(e:Error) {
				trace("Error in", this, "(dispose method):", e.message);
			}
		}				// BaseUI methods				/** @inheritDoc */		override public function refresh():void {			super.refresh();			if (_baseUI != null) _baseUI.refresh();		}				// DisplayObjectContainer methods				/** @private */		override public function addChild(child:DisplayObject):DisplayObject {			addToBaseUI(child);			return super.addChild(child);		}				/** @private */		override public function addChildAt(child:DisplayObject, index:int):DisplayObject {			addToBaseUI(child);			return super.addChildAt(child, index);		}				/** @private */		override public function removeChild(child:DisplayObject):DisplayObject {			removeFromBaseUI(child);			return super.removeChild(child);		}				/** @private */		override public function removeChildAt(index:int):DisplayObject {			removeFromBaseUI(getChildAt(index));			return super.removeChildAt(index);		}				// CanvasUI methods				/**		 * Add a DisplayObject child to the canvas and get an ElementUI instance 		 * @param obj DisplayObject instance		 * @return ElementUI instance		 * @see com.soma.ui.ElementUI		 */		public function add(obj:DisplayObject):ElementUI {			addChild(obj);			return _baseUI.getElement(obj);		}				/**		 * Add a DisplayObject child to the canvas and get an ElementUI instance. The child is added at the index position specified.		 * @param obj DisplayObject instance		 * @param index The index position to which the child is added		 * @return ElementUI instance		 * @see com.soma.ui.ElementUI		 */		public function addAt(obj:DisplayObject, index:int):ElementUI {			addChildAt(obj, index);			return _baseUI.getElement(obj);		}				/**		 * Returns the ElementUI instance of a DisplayObject instance.		 * @param obj DisplayObject instance		 * @return ElementUI instance		 */		public function getElement(obj:DisplayObject):ElementUI {			return _baseUI.getElement(obj);		}		/**		 * Returns the ElementUI instance of the DisplayObject instance at the index position specified.		 * @param index The index position to which the child is added		 * @return ElementUI instance		 */		public function getElementAt(index:int):ElementUI {			var object:DisplayObject = super.getChildAt(index);			return _baseUI.getElement(object);		}				/**		 * Returns the ElementUI instance of the DisplayObject that exists with the specified name.		 * @param name Name of the DisplayObject instance		 * @return ElementUI instance		 */		public function getElementByName(name:String):ElementUI {			var object:DisplayObject = super.getChildByName(name);			return _baseUI.getElement(object);		}				/**		 * Removes the specified child DisplayObject instance from the canvas instance (same as removeChild).		 * @param obj DisplayObject instance of the child to be removed		 * @return The DisplayObject instance that you pass as a parameter		 */		public function remove(obj:DisplayObject):DisplayObject {			return removeChild(obj);		}				/**		 * Removes a child DisplayObject from the specified index position in the child list of the canvas (same as removeChildAt). 		 * @param index The index position to which the child is added		 *  @return The DisplayObject instance that you pass as a parameter		 */		public function removeAt(index:int):DisplayObject {			return removeChildAt(index);		}				/**		 * Indicates wether or not the canvas will calculate the size and position of the DisplayObject children		 * @default true		 */		public function get childrenEnable():Boolean {			return _childrenEnable;		}				public function set childrenEnable(value:Boolean):void {			_childrenEnable = value;			_baseUI.enable = _childrenEnable;		}	}}